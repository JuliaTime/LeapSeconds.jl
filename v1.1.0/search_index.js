var documenterSearchIndex = {"docs":
[{"location":"#LeapSeconds.jl-1","page":"LeapSeconds.jl","title":"LeapSeconds.jl","text":"","category":"section"},{"location":"#","page":"LeapSeconds.jl","title":"LeapSeconds.jl","text":"Modules = [LeapSeconds]","category":"page"},{"location":"#LeapSeconds.offset_tai_utc","page":"LeapSeconds.jl","title":"LeapSeconds.offset_tai_utc","text":"offset_tai_utc(tai1, tai2=0.0)\n\nReturns the difference between International Atomic Time (TAI) and Coordinated Universal Time (UTC) for a given TAI Julian day number tai1 (optionally split into two parts for increased precision).\n\nDelta AT = TAI - UTC\n\n\n\n\n\n","category":"function"},{"location":"#LeapSeconds.offset_tai_utc-Tuple{Dates.DateTime}","page":"LeapSeconds.jl","title":"LeapSeconds.offset_tai_utc","text":"offset_tai_utc(dt::DateTime)\n\nReturns the difference between International Atomic Time (TAI) and Coordinated Universal Time (UTC) for a given DateTime in TAI.\n\nDelta AT = TAI - UTC\n\n\n\n\n\n","category":"method"},{"location":"#LeapSeconds.offset_utc_tai","page":"LeapSeconds.jl","title":"LeapSeconds.offset_utc_tai","text":"offset_utc_tai(utc1, utc2=0.0)\n\nReturns the difference between Coordinated Universal Time (UTC) and International Atomic Time (TAI) for a given UTC pseudo-Julian day number utc1 (optionally split into two parts for increased precision).\n\nDelta AT = UTC - TAI\n\nnote: Note\nThis function uses the ERFA convention for Julian day numbers representing UTC dates during leap seconds.\n\n\n\n\n\n","category":"function"},{"location":"#LeapSeconds.offset_utc_tai-Tuple{Dates.DateTime}","page":"LeapSeconds.jl","title":"LeapSeconds.offset_utc_tai","text":"offset_utc_tai(dt::DateTime)\n\nReturns the difference between Coordinated Universal Time (UTC) and International Atomic Time (TAI) for a given DateTime in UTC.\n\nDelta AT = UTC - TAI\n\nwarning: Warning\nThe DateTime type from Julia's Standard Libary cannot represent UTC dates during leap seconds, e.g. \"2016-12-31T23:59:60.0\" will not be parsed as a valid DateTime but throw an error. The AstroTime.jl package provides a leap second-aware Epoch type that can be used as a replacement.\n\n\n\n\n\n","category":"method"}]
}
